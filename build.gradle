plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.10'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.hibernate.validator:hibernate-validator'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta' // Jakarta classifier 추가
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta" // Jakarta classifier 추가
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // auth
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // caching
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // https://mvnrepository.com/artifact/p6spy/p6spy
    implementation 'p6spy:p6spy:3.9.1'
}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated/sources/annotationProcessor/java/main"]
        }
    }
}
//clean {
//    delete file('src/main/generated')
//}
//
//tasks.named('compileJava', JavaCompile).configure {
//    options.annotationProcessorGeneratedSourcesDirectory = file("build/generated/querydsl")
//}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.bootRun {
    args = ["--spring.profiles.active=local"]
}
//apply plugin: 'maven'