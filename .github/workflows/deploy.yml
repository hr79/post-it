name: CI/CD Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'README.md'
      # - '.github/**'
      - 'docs/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
      DOCKER_USERNAME: ${{ secrets.PROD_DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_ACCESS_TOKEN: ${{ secrets.PROD_DOCKER_ACCESS_TOKEN }}
      EC2_HOST: ${{ secrets.PROD_EC2_HOST }}
      EC2_USER: ${{ secrets.PROD_EC2_USER }}
      EC2_PRIVATE_KEY: ${{ secrets.PROD_EC2_PRIVATE_KEY }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Clear Docker cache
      run: docker builder prune --all --force

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      # env:
        # DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        # DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.PROD_DOCKER_USERNAME }}
        password: ${{ secrets.PROD_DOCKER_ACCESS_TOKEN }}
          
    - name: Debugging Docker variables
      run: |
        echo "DOCKER_USERNAME: $DOCKER_USERNAME"
        # echo "DOCKER_REGISTRY_URL: $DOCKER_REGISTRY_URL"

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21' # 사용 중인 Java 버전에 맞게 변경

    - name: Build the project
      working-directory: ./postIt-backend
      env:
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      run: ./gradlew clean build -x test
        
    # backend
    - name: Build and push backend Docker image
      env:
        IMAGE_NAME: springboot-web
        IMAGE_TAG: latest
        # DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG ./postIt-backend --push
    #   run: |
    #     docker buildx build --no-cache --platform linux/amd64,linux/arm64 -t $DOCKER_REGISTRY_URL/springboot-web:latest ./postIt-backend --push

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        # flutter-version: 3.19.0
    - run: flutter --version
          
    - name: Build Flutter Web
      working-directory: ./postIt-frontend
      run: flutter build web

    - name: Build and push frontend Docker image
      env:
        IMAGE_NAME: flutter-web
        IMAGE_TAG: latest
      run: |
        docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG ./postIt-frontend --push
    #   run: |
    #     docker buildx build --no-cache --platform linux/amd64,linux/arm64 -t $DOCKER_REGISTRY_URL/flutter-web:latest ./postIt-frontend --push

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.PROD_EC2_HOST }}
        username: ${{ secrets.PROD_EC2_USER }}
        key: ${{ secrets.PROD_EC2_PRIVATE_KEY }}
        # envs:
          # DOCKER_USERNAME: ${{ secrets.PROD_DOCKER_USERNAME }}
        script: |
          export DOCKER_USERNAME="${{ secrets.PROD_DOCKER_USERNAME }}"
          
          cd /home/ubuntu
          sudo docker compose -f docker-compose.prod.yml down
          
          # Remove previous version images

          sudo docker rmi $DOCKER_USERNAME/springboot-web
          sudo docker rmi $DOCKER_USERNAME/flutter-web
          
          # Pull the latest images
          
          sudo docker pull $DOCKER_USERNAME/springboot-web:latest
          sudo docker pull $DOCKER_USERNAME/flutter-web:latest

          # Restart the containers using docker-compose
          
          sudo docker compose -f docker-compose.prod.yml up --build --detach

    - name: Mark workflow successful
      run: |
        echo "::set-output name=success::true"
